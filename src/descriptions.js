export default {
  getUserMedia: `            The MediaDevices.getUserMedia() method prompts the user for
permission to use a media input which produces a MediaStream with
tracks containing the requested types of media. That stream can
include, for example, a video track (produced by either a hardware
or virtual video source such as a camera, video recording device,
screen sharing service, and so forth), an audio track (similarly,
produced by a physical or virtual audio source like a microphone,
A/D converter, or the like), and possibly other track types`,

  MediaStreamId: `A DOMString containing 36 characters denoting a universally unique identifier (UUID) for the object.`,
  MediaStreamActive: `A Boolean value that returns true if the MediaStream is active, or false otherwise`,
  getTracks:`The getTracks() method of the MediaStream interface returns a sequence that represents all the MediaStreamTrack objects in this stream's track set, regardless of MediaStreamTrack.kind.`,
  getAudioTracks:`The getAudioTracks() method of the MediaStream interface returns a sequence that represents all the MediaStreamTrack objects in this stream's track set where MediaStreamTrack.kind is audio`,
  getVideoTracks:`The getVideoTracks() method of the MediaStream interface returns a sequence of MediaStreamTrack objects representing the video tracks in this stream.`,
  MediaStreamTrack:{
    contentHint:`A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers`,
    enabled:`A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
    Note: You can implement standard "mute" functionality by setting enabled to false. The muted property refers to a condition in which there's no media because of a technical issue.`,
    id:`Returns a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser.`,
    isolated:`Returns a Boolean value which is true if the track is isolated; that is, the track cannot be accessed by the document that owns the MediaStreamTrack. This happens when the peerIdentity property is set, or if the track comes from a cross-origin source.`,
    kind :`Returns a DOMString set to "audio" if the track is an audio track and to "video", if it is a video track. It doesn't change if the track is deassociated from its source.`,
    label :`Returns a DOMString containing a user agent-assigned label that identifies the track source, as in "internal microphone". The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.`,
    muted :`Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.
    Note: You can implement standard "mute" functionality by setting enabled to false, and unmute the media by setting it back to true again.`,
    readonly:`Returns a Boolean value with a value of true if the track is readonly (such a video file source or a camera that settings can't be modified), false otherwise.`,
    readyState:`Returns an enumerated value giving the status of the track. This will be one of the following values:
    "live" which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the enabled attribute.
    "ended" which indicates that the input is not giving any more data and will never provide new data.`,
    remote:`Returns a Boolean with a value of true if the track is sourced by a RTCPeerConnection, false otherwise.`,
    getCapabilities:`Returns the a list of constrainable properties available for the MediaStreamTrack.`,
    getConstraints:`Returns a MediaTrackConstraints object containing the currently set constraints for the track; the returned value matches the constraints last set using applyConstraints().`,
    getSettings:`Returns a MediaTrackSettings object containing the current values of each of the MediaStreamTrack's constrainable properties.`
  }

};
